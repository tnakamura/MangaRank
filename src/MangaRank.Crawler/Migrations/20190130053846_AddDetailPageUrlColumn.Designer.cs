// <auto-generated />
using System;
using MangaRank.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MangaRank.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190130053846_AddDetailPageUrlColumn")]
    partial class AddDetailPageUrlColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("MangaRank.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("MangaRank.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("BlogId")
                        .HasColumnName("blog_id");

                    b.Property<bool>("IsCrawled")
                        .HasColumnName("is_crawled");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnName("published_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("entries");
                });

            modelBuilder.Entity("MangaRank.Models.EntryItem", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnName("entry_id");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.HasKey("EntryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("entry_items");
                });

            modelBuilder.Entity("MangaRank.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Asin")
                        .IsRequired()
                        .HasColumnName("asin");

                    b.Property<string>("Author")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DetailPageUrl")
                        .HasColumnName("detail_page_url");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsComic")
                        .HasColumnName("is_comic");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnName("published_on");

                    b.Property<string>("Publisher")
                        .HasColumnName("publisher");

                    b.Property<int?>("Rank")
                        .HasColumnName("rank");

                    b.Property<int?>("Row")
                        .HasColumnName("row");

                    b.Property<int?>("Score")
                        .HasColumnName("score");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Asin")
                        .IsUnique();

                    b.HasIndex("Rank");

                    b.HasIndex("Row");

                    b.ToTable("items");
                });

            modelBuilder.Entity("MangaRank.Models.ItemTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnName("tag_id");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<int?>("Rank")
                        .HasColumnName("rank");

                    b.Property<int?>("Row")
                        .HasColumnName("row");

                    b.HasKey("TagId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("TagId", "Rank");

                    b.HasIndex("TagId", "Row");

                    b.ToTable("item_tags");
                });

            modelBuilder.Entity("MangaRank.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("count")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Count");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tags");
                });

            modelBuilder.Entity("MangaRank.Models.Entry", b =>
                {
                    b.HasOne("MangaRank.Models.Blog", "Blog")
                        .WithMany("Entries")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MangaRank.Models.EntryItem", b =>
                {
                    b.HasOne("MangaRank.Models.Entry", "Entry")
                        .WithMany("EntryItems")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaRank.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MangaRank.Models.ItemTag", b =>
                {
                    b.HasOne("MangaRank.Models.Item", "Item")
                        .WithMany("ItemTags")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MangaRank.Models.Tag", "Tag")
                        .WithMany("ItemTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
